name: "Demo - Website Health Check"

on:
  workflow_dispatch:
    inputs:
      website_url:
        description: "Website URL"
        required: true
        default: "https://test.pt/"

env:
  expected_status_code: 200 # Expected status code for a healthy website
  connection_timeout: 15 # Maximum time in seconds that you allow the connection to the server to take
  max_time: 30 # Maximum time in seconds that you allow the whole operation to take
  max_retries: 5 # Maximum number of retries
  wait_time: 5 # Time in seconds to wait between retries

jobs:
  check-website:
    name: "Website Health Check"
    runs-on: ubuntu-latest

    steps:
      - name: "Check Website Status"
        run: |
          retry_count=0
          success=false

          while [ $retry_count -lt ${{ env.max_retries }} ]; do
            status_code=$(curl --connect-timeout ${{ env.connection_timeout }} --max-time ${{ env.max_time }} --write-out "%{http_code}" --silent --output /dev/null ${{ github.event.inputs.website_url }})

            echo "Attempt $(($retry_count + 1)): Website {${{ github.event.inputs.website_url }} status code: ${status_code}"

            if [ "$status_code" -eq ${{ env.expected_status_code }} ]; then
              echo "Website is healthy (status code: ${status_code})"
              success=true
              break
            else
              echo "Website is down or unhealthy (status code: ${status_code} - expected: ${{ env.expected_status_code }})"
              retry_count=$(($retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Retrying in ${{ env.wait_time }} seconds..."
                sleep ${{ env.wait_time }}
              fi
            fi
          done

          if [ "$success" = false ]; then
            echo "Failed to verify website status after ${{ env.max_retries }} attempts."
            exit 1
          fi
